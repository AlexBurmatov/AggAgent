//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace LinkServer.LinkServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LinkServerWebSoapBinding", Namespace="http://webservice.linkserver.tibbo.com")]
    public partial class LinkServerWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getOperationCompleted;
        
        private System.Threading.SendOrPostCallback setOperationCompleted;
        
        private System.Threading.SendOrPostCallback callOperationCompleted;
        
        private System.Threading.SendOrPostCallback callXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback setByStringArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback callByStringArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback setXMLOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LinkServerWebService() {
            this.Url = global::LinkServer.Properties.Settings.Default.LinkServerClient_LinkServerWeb_LinkServerWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getCompletedEventHandler getCompleted;
        
        /// <remarks/>
        public event setCompletedEventHandler setCompleted;
        
        /// <remarks/>
        public event callCompletedEventHandler callCompleted;
        
        /// <remarks/>
        public event callXMLCompletedEventHandler callXMLCompleted;
        
        /// <remarks/>
        public event getXMLCompletedEventHandler getXMLCompleted;
        
        /// <remarks/>
        public event setByStringArrayCompletedEventHandler setByStringArrayCompleted;
        
        /// <remarks/>
        public event callByStringArrayCompletedEventHandler callByStringArrayCompleted;
        
        /// <remarks/>
        public event setXMLCompletedEventHandler setXMLCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getReturn")]
        public string get(string username, string password, string context, string variable) {
            object[] results = this.Invoke("get", new object[] {
                        username,
                        password,
                        context,
                        variable});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAsync(string username, string password, string context, string variable) {
            this.getAsync(username, password, context, variable, null);
        }
        
        /// <remarks/>
        public void getAsync(string username, string password, string context, string variable, object userState) {
            if ((this.getOperationCompleted == null)) {
                this.getOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOperationCompleted);
            }
            this.InvokeAsync("get", new object[] {
                        username,
                        password,
                        context,
                        variable}, this.getOperationCompleted, userState);
        }
        
        private void OngetOperationCompleted(object arg) {
            if ((this.getCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCompleted(this, new getCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        public void set(string username, string password, string context, string variable, string value) {
            this.Invoke("set", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        value});
        }
        
        /// <remarks/>
        public void setAsync(string username, string password, string context, string variable, string value) {
            this.setAsync(username, password, context, variable, value, null);
        }
        
        /// <remarks/>
        public void setAsync(string username, string password, string context, string variable, string value, object userState) {
            if ((this.setOperationCompleted == null)) {
                this.setOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetOperationCompleted);
            }
            this.InvokeAsync("set", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        value}, this.setOperationCompleted, userState);
        }
        
        private void OnsetOperationCompleted(object arg) {
            if ((this.setCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("callReturn")]
        public string call(string username, string password, string context, string function, string parameters) {
            object[] results = this.Invoke("call", new object[] {
                        username,
                        password,
                        context,
                        function,
                        parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void callAsync(string username, string password, string context, string function, string parameters) {
            this.callAsync(username, password, context, function, parameters, null);
        }
        
        /// <remarks/>
        public void callAsync(string username, string password, string context, string function, string parameters, object userState) {
            if ((this.callOperationCompleted == null)) {
                this.callOperationCompleted = new System.Threading.SendOrPostCallback(this.OncallOperationCompleted);
            }
            this.InvokeAsync("call", new object[] {
                        username,
                        password,
                        context,
                        function,
                        parameters}, this.callOperationCompleted, userState);
        }
        
        private void OncallOperationCompleted(object arg) {
            if ((this.callCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.callCompleted(this, new callCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("callXMLReturn")]
        public string callXML(string username, string password, string context, string function, string parameters) {
            object[] results = this.Invoke("callXML", new object[] {
                        username,
                        password,
                        context,
                        function,
                        parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void callXMLAsync(string username, string password, string context, string function, string parameters) {
            this.callXMLAsync(username, password, context, function, parameters, null);
        }
        
        /// <remarks/>
        public void callXMLAsync(string username, string password, string context, string function, string parameters, object userState) {
            if ((this.callXMLOperationCompleted == null)) {
                this.callXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OncallXMLOperationCompleted);
            }
            this.InvokeAsync("callXML", new object[] {
                        username,
                        password,
                        context,
                        function,
                        parameters}, this.callXMLOperationCompleted, userState);
        }
        
        private void OncallXMLOperationCompleted(object arg) {
            if ((this.callXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.callXMLCompleted(this, new callXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getXmlReturn")]
        public string getXML(string username, string password, string context, string variable) {
            object[] results = this.Invoke("getXML", new object[] {
                        username,
                        password,
                        context,
                        variable});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getXMLAsync(string username, string password, string context, string variable) {
            this.getXMLAsync(username, password, context, variable, null);
        }
        
        /// <remarks/>
        public void getXMLAsync(string username, string password, string context, string variable, object userState) {
            if ((this.getXMLOperationCompleted == null)) {
                this.getXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXMLOperationCompleted);
            }
            this.InvokeAsync("getXML", new object[] {
                        username,
                        password,
                        context,
                        variable}, this.getXMLOperationCompleted, userState);
        }
        
        private void OngetXMLOperationCompleted(object arg) {
            if ((this.getXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXMLCompleted(this, new getXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        public void setByStringArray(string username, string password, string context, string variable, string[] values) {
            this.Invoke("setByStringArray", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        values});
        }
        
        /// <remarks/>
        public void setByStringArrayAsync(string username, string password, string context, string variable, string[] values) {
            this.setByStringArrayAsync(username, password, context, variable, values, null);
        }
        
        /// <remarks/>
        public void setByStringArrayAsync(string username, string password, string context, string variable, string[] values, object userState) {
            if ((this.setByStringArrayOperationCompleted == null)) {
                this.setByStringArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetByStringArrayOperationCompleted);
            }
            this.InvokeAsync("setByStringArray", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        values}, this.setByStringArrayOperationCompleted, userState);
        }
        
        private void OnsetByStringArrayOperationCompleted(object arg) {
            if ((this.setByStringArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setByStringArrayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("callByStringArrayReturn")]
        public string callByStringArray(string username, string password, string context, string function, string[] values) {
            object[] results = this.Invoke("callByStringArray", new object[] {
                        username,
                        password,
                        context,
                        function,
                        values});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void callByStringArrayAsync(string username, string password, string context, string function, string[] values) {
            this.callByStringArrayAsync(username, password, context, function, values, null);
        }
        
        /// <remarks/>
        public void callByStringArrayAsync(string username, string password, string context, string function, string[] values, object userState) {
            if ((this.callByStringArrayOperationCompleted == null)) {
                this.callByStringArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OncallByStringArrayOperationCompleted);
            }
            this.InvokeAsync("callByStringArray", new object[] {
                        username,
                        password,
                        context,
                        function,
                        values}, this.callByStringArrayOperationCompleted, userState);
        }
        
        private void OncallByStringArrayOperationCompleted(object arg) {
            if ((this.callByStringArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.callByStringArrayCompleted(this, new callByStringArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.linkserver.tibbo.com", ResponseNamespace="http://webservice.linkserver.tibbo.com")]
        public void setXML(string username, string password, string context, string variable, string value) {
            this.Invoke("setXML", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        value});
        }
        
        /// <remarks/>
        public void setXMLAsync(string username, string password, string context, string variable, string value) {
            this.setXMLAsync(username, password, context, variable, value, null);
        }
        
        /// <remarks/>
        public void setXMLAsync(string username, string password, string context, string variable, string value, object userState) {
            if ((this.setXMLOperationCompleted == null)) {
                this.setXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetXMLOperationCompleted);
            }
            this.InvokeAsync("setXML", new object[] {
                        username,
                        password,
                        context,
                        variable,
                        value}, this.setXMLOperationCompleted, userState);
        }
        
        private void OnsetXMLOperationCompleted(object arg) {
            if ((this.setXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setXMLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getCompletedEventHandler(object sender, getCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void callCompletedEventHandler(object sender, callCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class callCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal callCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void callXMLCompletedEventHandler(object sender, callXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class callXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal callXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getXMLCompletedEventHandler(object sender, getXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setByStringArrayCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void callByStringArrayCompletedEventHandler(object sender, callByStringArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class callByStringArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal callByStringArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setXMLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591